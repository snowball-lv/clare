



static RET_TYPE MANGLE(_Munch)(Node *root, List *patterns, List *ops) {
    
    int _index = 0;
    
    #define MUNCH(node)     MANGLE(_Munch)(node, patterns, ops)
    #define EMIT(op)        ListAdd(ops, op)
    
    UNUSED(ops);
    
    #define RULE(pattern, action) {             \
        Node *p = ListGet(patterns, _index);    \
        if (NodeMatch(root, p)) {               \
            action;                             \
            return RET_DEFAULT;                 \
        }                                       \
        _index++;                               \
    }
        #include RULE_FILE
    #undef RULE
    
    #undef EMIT
    #undef MUNCH
        
    printf("Trying to match node: %s\n", NodeName(root));
    assert(0 && "No rule matches node");
}

static List *MANGLE(Munch)(Node *root) {
    
    List *ops = NewList();
    List *patterns = NewList();
    
    #define RULE(pattern, action)   ListAdd(patterns, pattern);
        #include RULE_FILE
    #undef RULE
    
    MANGLE(_Munch)(root, patterns, ops);
    
    LIST_EACH(patterns, Node *, pattern, {
        NodeDeleteTree(pattern);
    });
    DeleteList(patterns);
    
    return ops;
}
