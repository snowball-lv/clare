

// #define NODE(name, params, init)

#define SIMPLE(name)    NODE(name, (), {})

SIMPLE(None)
SIMPLE(Any)
SIMPLE(Nop)

NODE(Mov, (Node *dst, Node *src), {
    
    ASSERTM(
        IRIsScalar(dst->data_type),
        "Node: %s, Type: %s\n",
        NodeName(dst),
        IRDataTypeName(dst->data_type));
            
    ASSERTM(
        IRIsScalar(src->data_type),
        "Node: %s, Type: %s\n",
        NodeName(src),
        IRDataTypeName(src->data_type));
    
    ASSERTM(
        dst->data_type == src->data_type,
        "Node: %s, Type: %s\n"
        "Node: %s, Type: %s\n",
        NodeName(dst),
        IRDataTypeName(dst->data_type),
        NodeName(src),
        IRDataTypeName(src->data_type));
    
    self->data_type = IR_DT_None;
    self->kids[0] = dst;
    self->kids[1] = src;
})

NODE(Tmp, (int data_type), {
    ASSERT(IRIsScalar(data_type));
    self->data_type = data_type;
    self->id = NewTmpID();
})

NODE(Add, (Node *left, Node *right), {
    
    ASSERTM(
        IRIsScalar(left->data_type),
        "Node: %s, Type: %s\n",
        NodeName(left),
        IRDataTypeName(left->data_type));
            
    ASSERTM(
        IRIsScalar(right->data_type),
        "Node: %s, Type: %s\n",
        NodeName(right),
        IRDataTypeName(right->data_type));
        
    ASSERTM(
        left->data_type == right->data_type,
        "Node: %s, Type: %s\n"
        "Node: %s, Type: %s\n",
        NodeName(left),
        IRDataTypeName(left->data_type),
        NodeName(right),
        IRDataTypeName(right->data_type));
        
    self->data_type = left->data_type;
    self->kids[0] = left;
    self->kids[1] = right;
})

NODE(I32, (int32_t i32), {
    self->data_type = IR_DT_I32;
    self->i32 = i32;
})

NODE(Float, (float f), {
    self->data_type = IR_DT_Float;
    self->f = f;
})

NODE(Str, (const char *str), {
    self->data_type = IR_DT_Str;
    self->str = str;
})

NODE(Seq, (Node *left, Node *right), {
    self->data_type = IR_DT_None;
    self->kids[0] = left;
    self->kids[1] = right;
})

NODE(Ret, (Node *node), {
    ASSERT(IRIsScalar(node->data_type));
    self->data_type = IR_DT_None;
    self->kids[0] = node;
})

NODE(Ftd, (Node *f), {
    ASSERT(f->data_type == IR_DT_Float);
    self->data_type = IR_DT_Double;
    self->kids[0] = f;
})

NODE(Itf, (Node *i32), {
    ASSERT(i32->data_type == IR_DT_I32);
    self->data_type = IR_DT_Float;
    self->kids[0] = i32;
})

NODE(Arg, (int arg_index, int data_type), {
    ASSERT(IRIsScalar(data_type));
    self->data_type = data_type;
    self->arg_index = arg_index;
})

NODE(Call, (int data_type, const char *fname, List *args), {
    ASSERT(IRIsScalar(data_type));
    self->data_type = data_type;
    self->fname = fname;
    self->args = args;
})

NODE(Branch, (Node *cond, Node *t, Node *f), {
    self->data_type = IR_DT_None;
    self->kids[0] = cond;
    self->kids[1] = t;
    self->kids[2] = f;
})

NODE(Loop, (Node *cond, Node *t), {
    self->data_type = IR_DT_None;
    self->kids[0] = cond;
    self->kids[1] = t;
})

NODE(Eq, (Node *left, Node *right), {
    
    ASSERTM(
        IRIsScalar(left->data_type),
        "Node: %s, Type: %s\n",
        NodeName(left),
        IRDataTypeName(left->data_type));
            
    ASSERTM(
        IRIsScalar(right->data_type),
        "Node: %s, Type: %s\n",
        NodeName(right),
        IRDataTypeName(right->data_type));
        
    ASSERTM(
        left->data_type == right->data_type,
        "Node: %s, Type: %s\n"
        "Node: %s, Type: %s\n",
        NodeName(left),
        IRDataTypeName(left->data_type),
        NodeName(right),
        IRDataTypeName(right->data_type));
        
    self->data_type = IR_DT_None;
    self->kids[0] = left;
    self->kids[1] = right;
})

NODE(Lt, (Node *left, Node *right), {
    
    ASSERTM(
        IRIsScalar(left->data_type),
        "Node: %s, Type: %s\n",
        NodeName(left),
        IRDataTypeName(left->data_type));
            
    ASSERTM(
        IRIsScalar(right->data_type),
        "Node: %s, Type: %s\n",
        NodeName(right),
        IRDataTypeName(right->data_type));
        
    ASSERTM(
        left->data_type == right->data_type,
        "Node: %s, Type: %s\n"
        "Node: %s, Type: %s\n",
        NodeName(left),
        IRDataTypeName(left->data_type),
        NodeName(right),
        IRDataTypeName(right->data_type));
        
    self->data_type = IR_DT_None;
    self->kids[0] = left;
    self->kids[1] = right;
})

#undef SIMPLE
